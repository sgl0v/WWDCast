# Customise this file, documentation can be found here:
# https://docs.fastlane.tools/actions/
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.60.1"
REQUIRED_XCODE_VERSION = "9.0.1"
default_platform :ios

platform :ios do
  before_all do
    verify_xcode_version
    git_pull(only_tags: true)
    cocoapods
  end

  after_all do
    push_git_tags
    clean_build_artifacts
  end

  def change_log_since_last_tag
    # http://git-scm.com/docs/pretty-formats
    # <short hash> <commit title>
    return changelog_from_git_commits(pretty: '%h %s')
  end

  def version_string(version_number, build_number)
    "#{version_number} (#{build_number})"
  end

  def tag_name(build_type, version_number, build_number)
    "#{build_type}/#{version_number}/#{build_number}"
  end

  def slack_new_version(service)
    complete_version_number = version_string(get_version_number, get_build_number)
    slack(
      message: "Submitted a beta build to #{service}: v#{complete_version_number}",
      channel: "#ci"
    )
  end

  desc "Download and refresh profiles"
  lane :certificates do
    match(type: "development", app_identifier: "com.sgl0v.wwdcast.development", force_for_new_devices: true)
    match(type: "appstore", app_identifier: "com.sgl0v.wwdcast.app-store")
  end

  desc "Runs all the tests"
  lane :test do
    scan
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    ensure_git_status_clean # Ensure that your git status is not dirty
    ensure_git_branch(branch: "master") # Ensure that we are using the master branch

    bump_version(build_type: "testflight", increment_version_number: false)
    certificates # fetch profiles & certificates
    gym(scheme: "WWDCast") # Build your app - more options available
    pilot(skip_waiting_for_build_processing: true)

    slack_new_version("Testflight")
  end

  desc "Deploy a new version to the App Store"
  lane :release do
    ensure_git_status_clean # Ensure that your git status is not dirty
    ensure_git_branch(branch: "master") # Ensure that we are using the master branch

    bump_version(build_type: "app-store", increment_version_number: true)
    certificates # fetch profiles & certificates
    gym(scheme: "WWDCast") # Build your app - more options available
    deliver(force: true)

    slack_new_version("App Store")
  end

  private_lane :verify_xcode_version do
    ensure_xcode_version(version: REQUIRED_XCODE_VERSION)
  end

  private_lane :bump_version do |options|
    should_increment_version_number = options[:increment_version_number]
    build_type = options[:build_type]
    raise "Missing `increment_version_number` parameter!" unless should_increment_version_number != nil
    raise "Missing `build_type` parameter!" unless build_type != nil

    if should_increment_version_number
      increment_version_number
    end
    version_number = get_version_number
    build_number = increment_build_number(build_number: number_of_commits) # Increment the build number (not the version number)
    complete_version_number = version_string(version_number, build_number)
    add_git_tag(tag: tag_name(build_type, version_number, build_number)) # Add a git tag for this build. This will automatically use an appropriate git tag name
    commit_version_bump(message:"Version Bump to #{complete_version_number}") # Commit the version bump
    push_to_git_remote # Push the new commit and tag back to your git remote
  end

end
